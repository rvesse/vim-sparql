# This is a syntactically invalid query file but it serves to demonstrate all
# the SPARQL syntax features
# TODO Todo Notes will be highlighted appropriately :)

BASE <http://base>
PREFIX ex: <http://example.org>

# The SPARQL plugin includes a prefix expansion feature using prefix.cc
# To use it type \p when in command mode and the word under the cursor will
# be expanded if possible
# Try it on the following:
# rdf
# foaf

SELECT
  ?x
  (true AS ?true) 
  (<http://some/uri> AS ?example) 
  ("test" AS ?literal) ("test"^^<http://type> AS ?typedLiteral) ("test"@en AS ?langLiteral)
  (123 AS ?int) (12.3 AS ?decimal) (1.2e3 AS ?double) (.e3 AS ?expOnlyDouble) (1e3 AS ?noFloatDouble)
  (-123 AS ?negInt) (-12.3 AS ?negDecimal) (-1.2e3 AS ?negDouble) (-.e3 AS ?negExpOnlyDouble) (-1e3 AS ?negNoFloatDouble)
FROM NAMED <http://graph>
WHERE
{
  # Check highlighting of different syntax elements
  VALUES ?x
  {
    <http://example.org/path/to/file.ext?querystring#fragment>
    <http://illegal whitespace	in	uri>
    <http://illegal
newline>
    "text" 
    "text"^^<http://datatype> 
    "text"@en 
    "text with \n \t \r \b \f \" \' escape sequences"
    "text with codepoint \u1234 \U12345678 escape sequences"
    [] 
    _:blank 
    123 
    12.3 
    1.2e3
    true
    false
    UNDEF
  }
  BIND(ISURI(?x) AS ?uri)
  MINUS { ?y a ?type }
  GRAPH ?g { }
  { {} UNION {} }
  OPTIONAL { }
  SERVICE <http://endpoint> { }

  # Deep nesting and folding
  # Graph Pattern braces are marked as fold points
  {
    {
      {
        # 5 levels deep
        {
          # 6 levels deep 
          # SPARQL syntax define the foldlevel to be 5 so only deeply nested queries are folded automatically
          # NB - If rainbow parentheis is installed folding may be broken depending on which plugin you have
          #      If you have Rainbow Parenthesis Improved (https://github.com/oblitum/rainbow) then folding should still work
          #
          # Use :foldopen to open the fold
          {
            # 7 levels deep
            {
              # 8 levels deep
              {
                 # 9 levels deep
              }
            }
          }
        }
      }
    }
  }
  # Blank Node braces are also marked as fold points
  [ ?a [ ?b [ ?c [ ?d [ ?e ] ] ] ] ]
  # As well as function call braces
  BIND(STR(STR(STR(STR(STR(STR(STR(STR(?a)))))))))

  # Check highlighting of some functions
  FILTER EXISTS { ?x a ?type }
  FILTER NOT EXISTS { ?x a ?type }
  FILTER CONTAINS(STR(?x), "foo")
  FILTER ?x IN ("foo", "bar")
  FILTER ?x NOT IN ("faz")

  # Check highlighting of operators
  FILTER(1 && 2 || !false || 4 > 5 || 4 < 5 || 4 + 5 || 4 - 5 || 4 * 5 || 4 / 5 || 4 != 5 || 4 = 5 || 4 >= 5 || 4 <= 5)
  BIND("contains" AS ?containsString)
}
GROUP BY ?x
HAVING (COUNT(?x) > 2)
LIMIT 5 OFFSET 10
ORDER BY ASC(?foo) DESC(?bar)
